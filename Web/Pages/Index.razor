@page "/"

<PageTitle>Schedules</PageTitle>

@using Web.Data
@using Blazor.Extensions.Storage
@inject ScheduleService _scheduleService
@inject IJSRuntime _js
@inject LocalStorage _localStorage

<h1>Schedule</h1>

<div class="container">
    <div class="row">
        <div class="col-md-5 col-xs-12">
            <select class="form-select" onchange="@OnSeasonChange">
                @if (_seasons != default)
                {
                    foreach (var season in _seasons)
                    {
                        <option value="@season.Id">@season.Name</option>
                    }
                }
            </select>
        </div>
        <div class="col-md-5 col-xs-11">

            @if (_teams != default)
            {
            
                <select class="form-select" onchange="@OnTeamChange">
                    @foreach (var team in _teams)
                    {
                        <option value="@team.TeamId" selected="@(_selectedTeam == team.TeamId)">@team.Name</option>
                    }
                </select>
            }
            
            <FluentButton
                @onclick="@SetTeamAsFavorite"
                Appearance="@Appearance.Filled"
                Style="margin: 8px;">
                    <FluentIcon Name="@FluentIcons.Star"></FluentIcon>Favorite
            </FluentButton>
        </div>
        <div class="col-md-2 col-xs-1">
            <div style="visibility: @(_fetching ? "visible" : "hidden")" class="lds-ellipsis"><div></div><div></div><div></div><div></div></div>
        </div>
    </div>

    <style>
        .gameRow:hover {
            cursor: pointer;
            background-color: #D6FCFF;
        }
        .selectedRow {
            color: white;
            background-color: lightblue;
        }
        .selectedRow:hover {
            background-color: aquamarine;
        }
    </style>

@if (_snokingGames == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Context="edit" Model="@_snokingGames">
        <div class="row">
            <div class="col-6">
                <FluentButton
                    Disabled="@_snokingGames.All(x => !x.Checked)"
                    @onclick="@DownloadForBenchapp"
                    Appearance="@Appearance.Filled"
                    Style="margin: 8px;">
                    Download BenchApp CSV
                </FluentButton>
            </div>
            <div class="col-3">
                <FluentTextField @bind-Value="@_homeNotes" Placeholder="White jerseys">Home Notes</FluentTextField>
            </div>
            <div class="col-3">
                <FluentTextField @bind-Value="@_awayNotes" Placeholder="Dark jerseys">Away Notes</FluentTextField>
            </div>
        </div>
        <div class="row">
            <div class="col">
                @if (_snokingGames != null)
                {
                    <FluentDataGrid RowsData=_snokingGames ColumnDefinitions=ColumnDefinitions GridTemplateColumns="1fr 1fr 1fr 1fr 1fr 1fr 1fr" TItem=GameView>
                        <RowItemTemplate>
                            <FluentDataGridRow TItem="GameView" @onclick="() => context.Checked = !context.Checked" class="@(context.Checked ? "gameRow selectedRow" : "gameRow")">
                                <FluentDataGridCell GridColumn=1>
                                    <InputCheckbox @bind-Value="context.Checked"></InputCheckbox>
                                </FluentDataGridCell>
                                <FluentDataGridCell GridColumn=2>@context.Date</FluentDataGridCell>
                                <FluentDataGridCell GridColumn=3>@context.DayOfWeek</FluentDataGridCell>
                                <FluentDataGridCell GridColumn=4>@context.Time</FluentDataGridCell>
                                <FluentDataGridCell GridColumn=5>@(context.IsHome ? "vs. " : "@ ")@context.Against</FluentDataGridCell>
                                <FluentDataGridCell GridColumn=6>@context.Rink</FluentDataGridCell>
                                <FluentDataGridCell GridColumn=7 Style="@($"color: {context.Color}")">@context.Score</FluentDataGridCell>
                            </FluentDataGridRow>
                        </RowItemTemplate>
                    </FluentDataGrid>
                }
            </div>
        </div>
    </EditForm>
}
</div>

@code {
    private List<GameView>? _snokingGames;
    private List<Season>? _seasons;
    private List<Team>? _teams;
    private int _selectedSeason;
    private int _selectedTeam;
    private bool _fetching;
    private string _awayNotes;
    private string _homeNotes;


    public List<ColumnDefinition<GameView>> ColumnDefinitions = new List<ColumnDefinition<GameView>>
    {
        new("", x => x.Checked),
        new("Date", x => x.Date),
        new("Day", x => x.DayOfWeek),
        new("Time", x => x.Time),
        new("Opponent", x => x.Against),
        new("Rink", x => x.Rink),
    };

    private Dictionary<string, string> _rinkNamesToAddresses = new()
    {
        { "Kirkland", "14326 124th Ave NE, Kirkland, WA 98034" },
        { "Renton", "12620 164th Ave SE, Renton, WA 98059" },
        { "Snoqualmie A", "35300 SE Douglas St, Snoqualmie, WA 98065" },
        { "Snoqualmie B", "35300 SE Douglas St, Snoqualmie, WA 98065" },
    };

    protected async Task OnAfterRenderAsync()
    {
        var seasons = await _scheduleService.GetSeasons();
        if (seasons.Count > 0)
        {
            _selectedSeason = seasons[0].Id;
            await _fetchTeams();
        }
        _seasons = seasons;
    }

    private static int? _getScore(object score)
    {
        return int.TryParse(score?.ToString(), out var parsed) ? parsed : null;
    }

    public record GameView(int Id, string Against, string Date, string DayOfWeek, string Time, string Rink, int? OurScore, int? TheirScore, bool IsHome, SnokingGame SnokingGame)
    {
        public bool Checked { get; set; }
        public string Color => OurScore > TheirScore ? "#20ff20" : OurScore == TheirScore ? "blue" : "red";
        public string Score => OurScore == null || TheirScore == null ? "" : $"{ResultPrefix} {OurScore}-{TheirScore}";
        public string ResultPrefix => OurScore > TheirScore ? "W" : OurScore == TheirScore ? "T" : "L";
    }

    private async Task DownloadForBenchapp()
    {
        if (_snokingGames == null)
        {
            return;
        }
        var stream = new MemoryStream();
        var streamWriter = new StreamWriter(stream, null, -1, true);
        var games = _snokingGames.Where(x => x.Checked).ToList();
        foreach (var game in games)
        {
            var home = game.IsHome ? game.SnokingGame.TeamHomeName : game.Against;
            var away = !game.IsHome ? game.SnokingGame.TeamAwayName : game.Against;
            var notes = game.IsHome ? _homeNotes ?? "White jerseys" : _awayNotes ?? "Dark jerseys";
            var rinkAddress = $"\"{_rinkNamesToAddresses.GetValueOrDefault(game.Rink, "")}\"";
            var line = string.Join(",", "GAME", "REGULAR", "", home, away, game.SnokingGame.DateTime.ToString("dd/MM/yyy"), game.SnokingGame.DateTime.ToString("h:mm:ss tt"), "1:15", game.Rink, rinkAddress, notes);
            await streamWriter.WriteLineAsync(line);
        }
        await streamWriter.FlushAsync();
        stream.Position = 0;
        var maxGame = games.Max(x => x.SnokingGame.DateTime);
        var minGame = games.Min(x => x.SnokingGame.DateTime);
        using var streamRef = new DotNetStreamReference(stream);
        var fileName = minGame != maxGame ? $"{minGame:yyyy-MM-dd} to {maxGame:yyyy-MM-dd} games.csv" : $"{minGame:yyyy-MM-dd} games.csv";
        await _js.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

    private async Task SetTeamAsFavorite()
    {
        await _localStorage.SetItem("FavoriteTeam", _selectedTeam);
    }

    private async Task OnSeasonChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out _selectedSeason))
        {
            await _fetchTeams();
        }
    }

    private async Task _fetchTeams()
    {
        var favoriteTeam = await _localStorage.GetItem<int>("FavoriteTeam");
        var teams = await _scheduleService.GetTeams(_selectedSeason);
        if (_selectedTeam == 0 || teams.All(x => x.TeamId != _selectedTeam))
        {
            if (teams.Any(x => x.TeamId == favoriteTeam))
            {
                _selectedTeam = favoriteTeam;
            }
            else
            {
                _selectedTeam = teams.First().TeamId;
            }
        }
        await _fetchGames();
        _teams = teams;
    }

    private async Task OnTeamChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out _selectedTeam))
        {
            await _fetchGames();
        }
    }

    private async Task _fetchGames()
    {
        try
        {
            _fetching = true;
            var allGames = await _scheduleService.GetGames(_selectedSeason, _selectedTeam);

            _snokingGames = allGames.OrderByDescending(x => x.DateTime).Select(game =>
            {
                var isHome = game.TeamHomeSeasonId == _selectedTeam;
                var against = isHome ? game.TeamAwayName : game.TeamHomeName;
                var ourScore = isHome ? _getScore(game.ScoreHome) : _getScore(game.ScoreAway);
                var theirScore = isHome ? _getScore(game.ScoreAway) : _getScore(game.ScoreHome);
                return new GameView(game.Id, against, game.Date, game.DateTime.DayOfWeek.ToString(), game.Time, game.RinkName, ourScore, theirScore, isHome,
                    game);
            }).ToList();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
        finally
        {
            _fetching = false;
        }
    }
}
