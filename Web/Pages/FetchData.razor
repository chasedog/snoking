@page "/fetchdata"

<PageTitle>Weather forecast</PageTitle>

@using Web.Data
@inject ScheduleService _scheduleService
@inject IJSRuntime JS

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (_snokingGames == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@_snokingGames">
        <button @onclick="Download">Download CSV</button>
        <table class="table">
            <thead>
            <tr>
                <th></th>
                <th>Date</th>
                <th>Day</th>
                <th>Time</th>
                <th>Opponent</th>
                <th>Rink</th>
                <th>Score</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var game in _snokingGames)
            {
                <tr>
                    <td><InputCheckbox @bind-Value="game.Checked"></InputCheckbox></td>
                    <td>@game.Date</td>
                    <td>@game.DayOfWeek</td>
                    <td>@game.Time</td>
                    <td>@game.Against</td>
                    <td>@game.Rink</td>
                    <td style="color: @game.Color">@game.Score</td>
                </tr>
            }
            </tbody>
        </table>
    </EditForm>
}

@code {
    private List<GameView>? _snokingGames;
    protected override async Task OnInitializedAsync()
    {
        var allGames = await _scheduleService.GetGames(1079, 1203);

        _snokingGames = allGames.OrderByDescending(x => x.DateTime).Select(game =>
        {
            var isHome = game.TeamHomeSeasonId == 1203;
            var against = isHome ? game.TeamAwayName : game.TeamHomeName;
            var ourScore = isHome ? _getScore(game.ScoreHome) : _getScore(game.ScoreAway);
            var theirScore = isHome ? _getScore(game.ScoreAway) : _getScore(game.ScoreHome);
            return new GameView(game.Id, against, game.Date, game.DateTime.DayOfWeek.ToString(), game.Time, game.RinkName, ourScore, theirScore, isHome, game);
        }).ToList();
    }
    
    private static int? _getScore(object score)
    {
        return int.TryParse(score?.ToString(), out var parsed) ? parsed : null;
    }

    public record GameView(int Id, string Against, string Date, string DayOfWeek, string Time, string Rink, int? OurScore, int? TheirScore, bool IsHome, SnokingGame SnokingGame)
    {
        public bool Checked { get; set; }
        public string Color => OurScore > TheirScore ? "#20ff20" : OurScore == TheirScore ? "blue" : "red";
        public string Score => OurScore == null || TheirScore == null ? "" : $"{ResultPrefix} {OurScore}-{TheirScore}";
        public string ResultPrefix => OurScore > TheirScore ? "W" : OurScore == TheirScore ? "T" : "L";
    }

    private async Task Download(MouseEventArgs obj)
    {
        if (_snokingGames == null)
        {
            return;
        }
        var stream = new MemoryStream();
        var streamWriter = new StreamWriter(stream, null, -1, true);
        foreach (var game in _snokingGames.Where(x => x.Checked))
        {
            var home = game.IsHome ? "Teamy McTeamface" : game.Against;
            var away = !game.IsHome ? "Teamy McTeamface" : game.Against;
            var line = string.Join(",", "GAME", "REGULAR", "", home, away, game.SnokingGame.DateTime.ToString("dd/MM/yyy"), game.SnokingGame.DateTime.ToString("h:mm:ss tt"), "1:15", game.Rink);
            await streamWriter.WriteLineAsync(line);
        }
        await streamWriter.FlushAsync();
        stream.Position = 0;
        using var streamRef = new DotNetStreamReference(stream);
        await JS.InvokeVoidAsync("downloadFileFromStream", "games.csv", streamRef);
    }
}
